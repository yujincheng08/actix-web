name: CI (post-merge)

on:
  push:
    branches: [master]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_and_test_nightly:
    strategy:
      fail-fast: false
      matrix:
        # prettier-ignore
        target:
          - { name: Linux, os: ubuntu-latest, triple: x86_64-unknown-linux-gnu }
          - { name: macOS, os: macos-latest, triple: x86_64-apple-darwin }
          - { name: Windows, os: windows-latest, triple: x86_64-pc-windows-msvc }
        version:
          - { name: nightly, version: nightly }

    name: ${{ matrix.target.name }} / ${{ matrix.version.name }}
    runs-on: ${{ matrix.target.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Install OpenSSL
        if: matrix.target.os == 'windows-latest'
        shell: bash
        run: |
          set -e
          choco install openssl --version=1.1.1.2100 -y --no-progress
          echo 'OPENSSL_DIR=C:\Program Files\OpenSSL' >> $GITHUB_ENV
          echo "RUSTFLAGS=-C target-feature=+crt-static" >> $GITHUB_ENV

      - name: Install Rust (${{ matrix.version.name }})
        uses: actions-rust-lang/setup-rust-toolchain@v1.8.0
        with:
          toolchain: ${{ matrix.version.version }}

      - name: Install cargo-hack and cargo-ci-cache-clean
        uses: taiki-e/install-action@v2.28.0
        with:
          tool: cargo-hack,cargo-ci-cache-clean

      - name: check minimal
        run: cargo ci-check-min

      - name: check default
        run: cargo ci-check-default

      - name: tests
        timeout-minutes: 60
        shell: bash
        run: |
          set -e
          cargo test --lib --tests -p=actix-router --all-features
          cargo test --lib --tests -p=actix-http --all-features
          cargo test --lib --tests -p=actix-web --features=rustls-0_20,rustls-0_21,rustls-0_22,openssl -- --skip=test_reading_deflate_encoding_large_random_rustls
          cargo test --lib --tests -p=actix-web-codegen --all-features
          cargo test --lib --tests -p=awc --all-features
          cargo test --lib --tests -p=actix-http-test --all-features
          cargo test --lib --tests -p=actix-test --all-features
          cargo test --lib --tests -p=actix-files
          cargo test --lib --tests -p=actix-multipart --all-features
          cargo test --lib --tests -p=actix-web-actors --all-features

      - name: CI cache clean
        run: cargo-ci-cache-clean

  ci_feature_powerset_check:
    name: Verify Feature Combinations
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1.8.0

      - name: Install cargo-hack
        uses: taiki-e/install-action@v2.28.0
        with:
          tool: cargo-hack

      - name: check feature combinations
        run: cargo ci-check-all-feature-powerset

      - name: check feature combinations
        run: cargo ci-check-all-feature-powerset-linux

  nextest:
    name: nextest
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1.8.0

      - name: Install nextest
        uses: taiki-e/install-action@v2.28.0
        with:
          tool: nextest

      - name: Test with cargo-nextest
        run: cargo nextest run
